function SdBm = generatePSD(freqs,par,varargin)
% This function is used to generate the power spectral density in dBm/Hz as
% generated by the electrical spectrum analyzer (ESA) in a delayed self
% heterodyning measurement (DSH) for the laser linewidth. 
% (see also doi: 10.1364/AO.58.003555)
% 
% call:
% SdBm = generatePSD(freqs,par)
%
% ... to modify internal variables an additional variable input in the form
% of generatePSD(...,'variableName',value) can be made.
%
% ---------- Output ----------
% SdBm          vector with spectrum in dBm/Hz as expected including shot
%               noise and correlated self-heterodyning signal (Voigt
%               profile) 
% 
% ---------- Input -----------
% freqs         equally spaced vector of the sampled points in frequency
%               space (use Hz) 
% par           vector with parameters of the DSH setup:
%               par(1)  laser-linewidth/(2*pi)
%               par(2)  delaytime of the self-heterodyne loop
%               par(3)  scaling of shot noise component
%               par(4)  scaling of Voigt component
%               par(5)  background (white) noise (e.g. NEP)
% 
% varargin: some internal variables can be modified via additional input
% pairs of the form 'variable name',value - in the following, the default
% values are shown: 
% 'RBW',3.9e3                       % resolution bandwidth as set in the
%                                   % ESA - choose small enough to resolve
%                                   % all features
% 'step',mean(diff(freqs))          % stepping of the filter function of
%                                   % the ESA - has to match the
%                                   % equidistant spacing of the frequency
%                                   % vector (freqs) within this code
%                                   % version
% 'DeltaRSFs',-2*RBW:step:2*RBW     % frequency sampling of the profile of
%                                   % the ESA filter function - the
%                                   % stepping has to match the one of the
%                                   % freqs input variable

%% defining parameters
RBW = 3.9e3;
convFactor = 1.5116;
step = mean(diff(freqs));
DeltaRSFs = -2*RBW:step:2*RBW;

%% overwrite defaults - if specified
for Index = 1:numel(varargin)/2
    eval([varargin{2*Index-1} '= varargin{2*Index};']);
end

%% response function
RSF = @(nu) 1./(sqrt(pi)*RBW/convFactor).*exp(-nu.^2./(RBW/convFactor).^2);

%% measured power spectral density of delayed self heterodyning
% par(1) parameter is k_w, par(2) is \tau_0, par(3) scaling of shot noise,
% par(4) scaling of Voigt
% according to doi: 10.1364/AO.58.003555
Si01conv = @(DeltaF,par) ...
    exp(-2*pi^2.*par(1).*par(2)) / (2*pi) .* RSF(DeltaF);

Si02 = @(DeltaF,par) ( par(1) ./ (pi^2.*par(1).^2+DeltaF.^2) .* ...
    ( 1 - exp(-2*pi^2.*par(1).*par(2)) .* ...
    ( cos(2*pi.*DeltaF.*par(2)) + ...
    pi^2*2.*par(1).*par(2).*sinc(2*pi.*DeltaF.*par(2)))));

Si02conv = conv(Si02(freqs,par),RSF(DeltaRSFs),'same').*step;

SIfull = (par(3).*Si01conv(freqs,par)+par(4)*Si02conv);

SdBm = 10*log10((SIfull+par(5))/1e3);

end